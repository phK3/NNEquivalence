; two nns with 2 hidden units, should be equivalent for the fixed input
(set-option :produce-models true)
(set-logic AUFLIRA)
; ### Variable declarations ###
(declare-const i_0_0 Real)
(declare-const i_0_1 Real)
(declare-const A_x_0_0 Real)
(declare-const A_x_0_1 Real)
(declare-const A_d_2_0 Int)
(declare-const A_d_2_1 Int)
(declare-const A_o_2_0 Real)
(declare-const A_o_2_1 Real)
(declare-const B_x_0_0 Real)
(declare-const B_x_0_1 Real)
(declare-const B_d_2_0 Int)
(declare-const B_d_2_1 Int)
(declare-const B_o_2_0 Real)
(declare-const B_o_2_1 Real)
(declare-const E_x_0_0 Real)
(declare-const E_x_0_1 Real)
(declare-const E_dg_0_0 Int)
(declare-const E_dl_0_0 Int)
(declare-const E_dg_0_1 Int)
(declare-const E_dl_0_1 Int)
; ### Variable bounds ###
(assert (<= i_0_0 -1.5))
(assert (<= -1.5 i_0_0))
(assert (<= i_0_1 0.))
(assert (<= 0. i_0_1))
(assert (<= A_d_2_0 1.))
(assert (<= 0. A_d_2_0))
(assert (<= A_d_2_1 1.))
(assert (<= 0. A_d_2_1))
(assert (<= B_d_2_0 1.))
(assert (<= 0. B_d_2_0))
(assert (<= B_d_2_1 1.))
(assert (<= 0. B_d_2_1))
(assert (<= E_dg_0_0 1.))
(assert (<= 0. E_dg_0_0))
(assert (<= E_dl_0_0 1.))
(assert (<= 0. E_dl_0_0))
(assert (<= E_dg_0_1 1.))
(assert (<= 0. E_dg_0_1))
(assert (<= E_dl_0_1 1.))
(assert (<= 0. E_dl_0_1))
; ### Constraints ###
(assert (= A_x_0_0 (+ (* 1 i_0_0) (* 2 i_0_1) 3)))
(assert (= A_x_0_1 (+ (* 4 i_0_0) (* 5 i_0_1) 6)))
(assert (<= 0 A_o_2_0))
(assert (<= A_x_0_0 A_o_2_0))
(assert (<= (+ A_x_0_0 (- (* 999999 A_d_2_0))) 0))
(assert (<= 0 (+ A_x_0_0 999999 (- (* 999999 A_d_2_0)))))
(assert (<= A_o_2_0 (+ A_x_0_0 999999 (- (* 999999 A_d_2_0)))))
(assert (<= A_o_2_0 (* 999999 A_d_2_0)))
(assert (<= 0 A_o_2_1))
(assert (<= A_x_0_1 A_o_2_1))
(assert (<= (+ A_x_0_1 (- (* 999999 A_d_2_1))) 0))
(assert (<= 0 (+ A_x_0_1 999999 (- (* 999999 A_d_2_1)))))
(assert (<= A_o_2_1 (+ A_x_0_1 999999 (- (* 999999 A_d_2_1)))))
(assert (<= A_o_2_1 (* 999999 A_d_2_1)))
(assert (= B_x_0_0 (+ (* 1 i_0_0) (* 2 i_0_1) 3)))
(assert (= B_x_0_1 (+ (* 5 i_0_0) (* 5 i_0_1) 6)))
(assert (<= 0 B_o_2_0))
(assert (<= B_x_0_0 B_o_2_0))
(assert (<= (+ B_x_0_0 (- (* 999999 B_d_2_0))) 0))
(assert (<= 0 (+ B_x_0_0 999999 (- (* 999999 B_d_2_0)))))
(assert (<= B_o_2_0 (+ B_x_0_0 999999 (- (* 999999 B_d_2_0)))))
(assert (<= B_o_2_0 (* 999999 B_d_2_0)))
(assert (<= 0 B_o_2_1))
(assert (<= B_x_0_1 B_o_2_1))
(assert (<= (+ B_x_0_1 (- (* 999999 B_d_2_1))) 0))
(assert (<= 0 (+ B_x_0_1 999999 (- (* 999999 B_d_2_1)))))
(assert (<= B_o_2_1 (+ B_x_0_1 999999 (- (* 999999 B_d_2_1)))))
(assert (<= B_o_2_1 (* 999999 B_d_2_1)))
(assert (= E_x_0_0 (+ A_o_2_0 (- B_o_2_0))))
(assert (<= E_x_0_0 (* 999999 E_dg_0_0)))
(assert (< (+ -999999.00000001 (- (* -999999.00000001 E_dg_0_0))) E_x_0_0))
(assert (<= (- E_x_0_0) (* 999999 E_dl_0_0)))
(assert (< (+ -999999.00000001 (- (* -999999.00000001 E_dl_0_0))) (- E_x_0_0)))
(assert (= E_x_0_1 (+ A_o_2_1 (- B_o_2_1))))
(assert (<= E_x_0_1 (* 999999 E_dg_0_1)))
(assert (< (+ -999999.00000001 (- (* -999999.00000001 E_dg_0_1))) E_x_0_1))
(assert (<= (- E_x_0_1) (* 999999 E_dl_0_1)))
(assert (< (+ -999999.00000001 (- (* -999999.00000001 E_dl_0_1))) (- E_x_0_1)))
(assert (<= 1 (+ E_dg_0_0 E_dl_0_0 E_dg_0_1 E_dl_0_1)))
(check-sat)
(get-model)